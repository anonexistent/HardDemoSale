// <auto-generated />
using System;
using DemoSale.DataBaseCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DemoSale.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.18");

            modelBuilder.Entity("DemoSale.Data.Pkt", b =>
                {
                    b.Property<uint>("pktId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("arrivedMoney")
                        .HasColumnType("REAL");

                    b.Property<int>("count")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("dateEntry")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("dateShipment")
                        .HasColumnType("TEXT");

                    b.Property<string>("dealer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("deliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("deptMoney")
                        .HasColumnType("REAL");

                    b.Property<string>("dopPositionDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("forCalculation")
                        .HasColumnType("REAL");

                    b.Property<double>("kvMoney")
                        .HasColumnType("REAL");

                    b.Property<double>("loadingUnloading")
                        .HasColumnType("REAL");

                    b.Property<string>("manager")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("marginalProfit")
                        .HasColumnType("REAL");

                    b.Property<int>("monthDeal")
                        .HasColumnType("INTEGER");

                    b.Property<double>("otherMoney")
                        .HasColumnType("REAL");

                    b.Property<double>("paidMoney")
                        .HasColumnType("REAL");

                    b.Property<string>("paymentMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("paymentTerm")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("paymentTermRealization")
                        .HasColumnType("TEXT");

                    b.Property<string>("positionName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("positionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("purchaseMoney")
                        .HasColumnType("REAL");

                    b.Property<double>("realization")
                        .HasColumnType("REAL");

                    b.Property<string>("region")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("salesDepartmentMoney")
                        .HasColumnType("REAL");

                    b.Property<string>("seller")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("sellerAgent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("specification")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("transportOther")
                        .HasColumnType("REAL");

                    b.Property<double>("transportOtherNds")
                        .HasColumnType("REAL");

                    b.HasKey("pktId");

                    b.ToTable("Pkt");
                });

            modelBuilder.Entity("DemoSale.Data.WarrantyRecord", b =>
                {
                    b.Property<Guid?>("warrantyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("contractId")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("dateShipment")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("dateUnsubscribe")
                        .HasColumnType("TEXT");

                    b.Property<uint>("pktParentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("subjectVin")
                        .HasColumnType("TEXT");

                    b.Property<string>("unTransDocNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("warrantyId");

                    b.HasIndex("pktParentId");

                    b.ToTable("WarrantyRecord");
                });

            modelBuilder.Entity("DemoSale.DataBaseCore.Dealer", b =>
                {
                    b.Property<string>("dealerName")
                        .HasColumnType("TEXT");

                    b.HasKey("dealerName");

                    b.ToTable("Dealer");
                });

            modelBuilder.Entity("DemoSale.DataBaseCore.PositionType", b =>
                {
                    b.Property<string>("positionName")
                        .HasColumnType("TEXT");

                    b.HasKey("positionName");

                    b.ToTable("PositionType");
                });

            modelBuilder.Entity("DemoSale.DataBaseCore.WarrantyContract", b =>
                {
                    b.Property<string>("serviceContract")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("dateEndWarranty")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("dateServiceContract")
                        .HasColumnType("TEXT");

                    b.Property<string>("engTecWorker")
                        .HasColumnType("TEXT");

                    b.Property<string>("regionDeFacto")
                        .HasColumnType("TEXT");

                    b.Property<int?>("technicalMaintenance")
                        .HasColumnType("INTEGER");

                    b.HasKey("serviceContract");

                    b.ToTable("WarrantyContract");
                });

            modelBuilder.Entity("DemoSale.DataBaseCore.WarrantySubject", b =>
                {
                    b.Property<string>("vin")
                        .HasColumnType("TEXT");

                    b.Property<int?>("dateRelease")
                        .HasColumnType("INTEGER");

                    b.Property<string>("engine")
                        .HasColumnType("TEXT");

                    b.Property<string>("evp")
                        .HasColumnType("TEXT");

                    b.Property<string>("positionName")
                        .HasColumnType("TEXT");

                    b.HasKey("vin");

                    b.ToTable("WarrantySubject");
                });

            modelBuilder.Entity("DemoSale.Data.WarrantyRecord", b =>
                {
                    b.HasOne("DemoSale.Data.Pkt", "pktParent")
                        .WithMany()
                        .HasForeignKey("pktParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pktParent");
                });
#pragma warning restore 612, 618
        }
    }
}
